Traceback (most recent call last):
  File "c:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "c:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\nbclient\client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "c:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\gordo\AppData\Local\Programs\Python\Python39\lib\asyncio\base_events.py", line 642, in run_until_complete
    return future.result()
  File "c:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\nbclient\client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "c:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\nbclient\client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "c:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\nbclient\client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
ds = ServiceXSourceXAOD(rucio_zee_r21_mc, backend='xaod_r21')
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mServiceXException[0m                         Traceback (most recent call last)
[1;32m~\AppData\Local\Temp/ipykernel_347504/3574249015.py[0m in [0;36m<module>[1;34m[0m
[1;32m----> 1[1;33m [0mds[0m [1;33m=[0m [0mServiceXSourceXAOD[0m[1;33m([0m[0mrucio_zee_r21_mc[0m[1;33m,[0m [0mbackend[0m[1;33m=[0m[1;34m'xaod_r21'[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m
[1;32mc:\users\gordo\code\iris-hep\func_adl_servicex\func_adl_servicex\ServiceX.py[0m in [0;36m__init__[1;34m(self, sx, backend, item_type)[0m
[0;32m    198[0m         [0mCreate[0m [0ma[0m [0mservicex[0m [0mdataset[0m [0msequence[0m [1;32mfrom[0m [0ma[0m [0mservicex[0m [0mdataset[0m[1;33m[0m[1;33m[0m[0m
[0;32m    199[0m         '''
[1;32m--> 200[1;33m         [0msuper[0m[1;33m([0m[1;33m)[0m[1;33m.[0m[0m__init__[0m[1;33m([0m[0msx[0m[1;33m,[0m [0mbackend[0m[1;33m,[0m [0mitem_type[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    201[0m [1;33m[0m[0m
[0;32m    202[0m [1;33m[0m[0m

[1;32mc:\users\gordo\code\iris-hep\func_adl_servicex\func_adl_servicex\ServiceX.py[0m in [0;36m__init__[1;34m(self, sx, backend_name, item_type)[0m
[0;32m    187[0m             [0mbackend_name[0m [1;33m([0m[0mstr[0m[1;33m)[0m[1;33m:[0m [0mThe[0m [0mbackend[0m [0mtype[0m[1;33m,[0m[0;31m [0m[0;31m`[0m[0mxaod[0m[0;31m`[0m[1;33m,[0m [1;32mfor[0m [0mexample[0m[1;33m,[0m [1;32mfor[0m [0mthe[0m [0mATLAS[0m [0mR21[0m [0mxaod[0m[1;33m[0m[1;33m[0m[0m
[0;32m    188[0m         '''
[1;32m--> 189[1;33m         [0msuper[0m[1;33m([0m[1;33m)[0m[1;33m.[0m[0m__init__[0m[1;33m([0m[0msx[0m[1;33m,[0m [0mbackend_name[0m[1;33m,[0m [0mitem_type[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    190[0m [1;33m[0m[0m
[0;32m    191[0m         [1;31m# Add the filename[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m

[1;32mc:\users\gordo\code\iris-hep\func_adl_servicex\func_adl_servicex\ServiceX.py[0m in [0;36m__init__[1;34m(self, sx, backend_name, item_type)[0m
[0;32m     58[0m         [1;31m# Get the base created[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[0;32m     59[0m         [1;32mif[0m [0misinstance[0m[1;33m([0m[0msx[0m[1;33m,[0m [1;33m([0m[0mstr[0m[1;33m,[0m [0mIterable[0m[1;33m)[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 60[1;33m             [0mds[0m [1;33m=[0m [0mServiceXDataset[0m[1;33m([0m[0msx[0m[1;33m,[0m [0mbackend_name[0m[1;33m=[0m[0mbackend_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     61[0m         [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m     62[0m             [0mds[0m [1;33m=[0m [0msx[0m[1;33m[0m[1;33m[0m[0m

[1;32mc:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\servicex\servicex.py[0m in [0;36m__init__[1;34m(self, dataset, backend_name, image, max_workers, servicex_adaptor, minio_adaptor, cache_adaptor, status_callback_factory, local_log, session_generator, config_adaptor, data_convert_adaptor, ignore_cache)[0m
[0;32m    218[0m         [1;32mif[0m [1;32mnot[0m [0mservicex_adaptor[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    219[0m             [1;31m# Given servicex adaptor is none, this should be ok. Fixes type checkers[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 220[1;33m             [0mend_point[0m[1;33m,[0m [0mtoken[0m [1;33m=[0m [0mconfig[0m[1;33m.[0m[0mget_servicex_adaptor_config[0m[1;33m([0m[0mbackend_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    221[0m             [0mservicex_adaptor[0m [1;33m=[0m [0mServiceXAdaptor[0m[1;33m([0m[0mend_point[0m[1;33m,[0m [0mtoken[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    222[0m         [0mself[0m[1;33m.[0m[0m_servicex_adaptor[0m [1;33m=[0m [0mservicex_adaptor[0m[1;33m[0m[1;33m[0m[0m

[1;32mc:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\servicex\servicex_config.py[0m in [0;36mget_servicex_adaptor_config[1;34m(self, backend_name)[0m
[0;32m    171[0m             [0mtoken[0m [1;33m([0m[0moptionally[0m[1;33m)[0m[1;33m.[0m[1;33m[0m[1;33m[0m[0m
[0;32m    172[0m         '''
[1;32m--> 173[1;33m         [0mconfig[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_get_backend_info[0m[1;33m([0m[0mbackend_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    174[0m [1;33m[0m[0m
[0;32m    175[0m         [0mendpoint[0m [1;33m=[0m [0mconfig[0m[1;33m[[0m[1;34m'endpoint'[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m

[1;32mc:\users\gordo\appdata\local\pypoetry\cache\virtualenvs\xaod-usage-w68kx7k0-py3.9\lib\site-packages\servicex\servicex_config.py[0m in [0;36m_get_backend_info[1;34m(self, backend_name)[0m
[0;32m    119[0m                               if ep['name'].exists()]
[0;32m    120[0m [1;33m[0m[0m
[1;32m--> 121[1;33m                 raise ServiceXException(f'Unable to find name/type {backend_name} '
[0m[0;32m    122[0m                                         [1;34m'in api_endpoints in servicex.yaml configuration file. Saw'[0m[1;33m[0m[1;33m[0m[0m
[0;32m    123[0m                                         [1;34mf' only names ({", ".join(seen_names)}) and types '[0m[1;33m[0m[1;33m[0m[0m

[1;31mServiceXException[0m: (ServiceXException(...), 'Unable to find name/type xaod_r21 in api_endpoints in servicex.yaml configuration file. Saw only names (open_uproot, default, atlas, dev_atlas) and types (uproot, cms_run1_aod, cms_run1_aod_2, dev_uproot, xaod, xaod)')
ServiceXException: (ServiceXException(...), 'Unable to find name/type xaod_r21 in api_endpoints in servicex.yaml configuration file. Saw only names (open_uproot, default, atlas, dev_atlas) and types (uproot, cms_run1_aod, cms_run1_aod_2, dev_uproot, xaod, xaod)')

